---
# filter list from user supplied env_names argument
- name: Set conda_env_list (filtered)
  set_fact:
    conda_env_list: "{{ miniconda_conda_environments | dict2items | selectattr('key', 'in', env_names) }}"
  when: env_names is defined
- name: Set conda_env_list (unfiltered)
  set_fact:
    conda_env_list: "{{ miniconda_conda_environments | dict2items }}"
  when: env_names is not defined
# create and update tasks from galaxyproject.miniconda with mamba replacing conda as exec
- name: Create conda envs
  command: >-
    {{ miniconda_prefix }}/bin/mamba create --yes
    {{ '--override-channels --channel' if (item.value.channels | default(miniconda_channels)) else '' }}
    {{ (item.value.channels | default(miniconda_channels)) | join(' --channel ') }}
    {{ '--name ' ~ item.key if not item.key.startswith('/') else '--prefix ' ~ item.key }}
    {{ '--copy' if (item.value['copy'] is boolean and item.value['copy']) else '' }}
    {{ item.value.packages | join(' ') }}
  args:
    creates: "{{ miniconda_prefix ~ '/envs/' ~ item.key if not item.key.startswith('/') else item.key }}"
  loop: "{{ conda_env_list }}"

- name: Update conda envs
  command: >-
    {{ miniconda_prefix }}/bin/mamba install --yes
    {{ '--override-channels --channel' if (item.value.channels | default(miniconda_channels)) else '' }}
    {{ (item.value.channels | default(miniconda_channels)) | join(' --channel ') }}
    {{ '--name ' ~ item.key if not item.key.startswith('/') else '--prefix ' ~ item.key }}
    {{ '--copy' if (item.value['copy'] is boolean and item.value['copy']) else '' }}
    {{ item.value.packages | join(' ') }}
  register: __miniconda_conda_install_output
  changed_when: "'All requested packages already installed' not in __miniconda_conda_install_output.stdout"
  loop: "{{ conda_env_list }}"
  ignore_errors: true  # There will be an error if the folder exists and is not a conda environment.  If this is the case, manually remove the folder and try again
